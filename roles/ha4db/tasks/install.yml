# install docker
- name: install docker
  apt:
    name:
      - docker.io
    state: latest
- name: Add to docker group
  user:
    name: appsrv
    groups: docker
    append: yes
- name: Start docker
  systemd:
    name: docker
    state: started
    enabled: yes
# install nodejs
- name: install package for nodejs
  apt:
    name:
      - curl
      - gnupg
    state: latest
- name: setup debian source
  shell: bash -lc "curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -"
- name: install nodejs and yarn
  apt:
    name:
      - nodejs
    state: latest
- name: Install yarn package globally.
  npm:
    name: yarn
    global: yes
# install processing
- name: install packages for processing
  apt:
    name:
      - ffmpeg
      - imagemagick
      - pdal
      - libvips-dev
      - libvips-tools
    state: latest
# checkout and setup app
- name: chechout ha4db
  git:
    repo: https://github.com/ha4db/ha4db.git
    version: main
    dest: /home/appsrv/ha4db
  become_user: appsrv
  become: true
- name: bundle install
  command: bash -lc "bundle install"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
- name: check config/credentials/production.key
  stat:
    path: /home/appsrv/ha4db/config/credentials/production.key
  register: production_key_check
- name: create secret_key_base
  shell: bash -lc "ruby -e 'require :securerandom.to_s; puts SecureRandom.hex(128)'"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
  register: secret_key_base
- name: create postgresql_password
  shell: bash -lc "ruby -e 'require :securerandom.to_s; puts SecureRandom.alphanumeric(30)'"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
  register: postgresql_password
- name: editor environment
  set_fact:
    secret_key_base_editor_environment: "echo secret_key_base: {{ secret_key_base.stdout }} >>"
    postgresql_editor_environment: "echo database_url: postgis://ha4db:{{ postgresql_password.stdout }}@localhost/ha4db_production >>"
- name: generate production.key and enc with secret_key_base
  shell: bash -lc "EDITOR='{{ secret_key_base_editor_environment }}' bundle exec rails credentials:edit --environment production"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
  when: not production_key_check.stat.exists
- name: write postgresql database_url
  shell: bash -lc "EDITOR='{{ postgresql_editor_environment }}' bundle exec rails credentials:edit --environment production"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
  when: not production_key_check.stat.exists
# setup postgresql
- name: Apt install some packages
  apt:
    name:
      - postgresql-12-postgis-3
      - python3-psycopg2
    state: latest
- name: create db user
  postgresql_user:
    name: ha4db
    password: "{{ postgresql_password.stdout }}"
    role_attr_flags: CREATEDB
  become_user: postgres
  become: true
  when: not production_key_check.stat.exists
- name: create database
  postgresql_db:
    name: ha4db_production
    owner: ha4db
    encoding: UTF-8
    template: template0
  become_user: postgres
  become: true
  when: not production_key_check.stat.exists
- name: add postgis function
  postgresql_ext:
    name: postgis
    db: ha4db_production
  become_user: postgres
  become: true
  when: not production_key_check.stat.exists
- name: add postgis function
  postgresql_ext:
    name: postgis_topology
    db: ha4db_production
  become_user: postgres
  become: true
  when: not production_key_check.stat.exists
- name: change listen_address
  lineinfile:
    dest: /etc/postgresql/12/main/postgresql.conf
    regexp: "^#listen_addresses"
    line: "listen_addresses = '*'"
    state: present
    backup: yes
  become_user: postgres
  register: postgresql_conf
  become: true
- name: restart postgresql
  service:
    name: postgresql
    state: restarted
  when: postgresql_conf is changed
# deploy
- name: create deploy_path
  file:
    dest: /srv/ha4db/app
    state: directory
    owner: appsrv
- name: create deploy_path shared/config/credentials
  file:
    dest: /srv/ha4db/app/shared/config/credentials
    state: directory
    owner: appsrv
- name: copy production.key
  ansible.builtin.copy:
    remote_src: yes
    src: /home/appsrv/ha4db/config/credentials/production.key
    dest: /srv/ha4db/app/shared/config/credentials/production.key
  become_user: appsrv
  become: true
- name: copy production.yml.enc
  ansible.builtin.copy:
    remote_src: yes
    src: /home/appsrv/ha4db/config/credentials/production.yml.enc
    dest: /srv/ha4db/app/shared/config/credentials/production.yml.enc
  become_user: appsrv
  become: true
- name: run deploy:check
  command: bash -lc "bundle exec cap production deploy:check"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
- name: run deploy
  command: bash -lc "bundle exec cap production deploy"
  args:
    chdir: /home/appsrv/ha4db
  become_user: appsrv
  become: true
# nginx
- name: install nginx
  apt:
    name:
      - nginx
    state: latest
- name: copy nginx conf
  copy:
    src: roles/ha4db/templates/ha4db-nginx.conf
    dest: /etc/nginx/sites-available/ha4db.conf
  register: nginx_conf
- name: make symbolic link
  file:
    src: /etc/nginx/sites-available/ha4db.conf
    dest: /etc/nginx/sites-enabled/ha4db.conf
    state: link
  when: nginx_conf is changed
- name: Start nginx
  systemd:
    name: nginx
    state: restarted
    enabled: yes
# install redis
- name: install redis
  apt:
    name:
      - redis-server
    state: latest
- name: Start redis
  systemd:
    name: redis
    state: restarted
    enabled: yes
# install sidekiq systemd
- name: copy sidekiq systemd
  copy:
    src: roles/ha4db/templates/sidekiq.service
    dest: /etc/systemd/system/sidekiq.service
- name: Start sidekiq
  systemd:
    name: sidekiq
    state: restarted
    enabled: yes
